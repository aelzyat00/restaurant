// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/auth/login/page.tsx
{
  const handler = {} as typeof import("../../app/auth/login/page.js")
  handler satisfies AppPageConfig<"/auth/login">
}

// Validate ../../app/auth/sign-up-success/page.tsx
{
  const handler = {} as typeof import("../../app/auth/sign-up-success/page.js")
  handler satisfies AppPageConfig<"/auth/sign-up-success">
}

// Validate ../../app/auth/sign-up/page.tsx
{
  const handler = {} as typeof import("../../app/auth/sign-up/page.js")
  handler satisfies AppPageConfig<"/auth/sign-up">
}

// Validate ../../app/auth/update-password/page.tsx
{
  const handler = {} as typeof import("../../app/auth/update-password/page.js")
  handler satisfies AppPageConfig<"/auth/update-password">
}

// Validate ../../app/cart/page.tsx
{
  const handler = {} as typeof import("../../app/cart/page.js")
  handler satisfies AppPageConfig<"/cart">
}

// Validate ../../app/checkout/page.tsx
{
  const handler = {} as typeof import("../../app/checkout/page.js")
  handler satisfies AppPageConfig<"/checkout">
}

// Validate ../../app/customer/page.tsx
{
  const handler = {} as typeof import("../../app/customer/page.js")
  handler satisfies AppPageConfig<"/customer">
}

// Validate ../../app/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/delivery/history/page.tsx
{
  const handler = {} as typeof import("../../app/delivery/history/page.js")
  handler satisfies AppPageConfig<"/delivery/history">
}

// Validate ../../app/delivery/page.tsx
{
  const handler = {} as typeof import("../../app/delivery/page.js")
  handler satisfies AppPageConfig<"/delivery">
}

// Validate ../../app/delivery/profile/page.tsx
{
  const handler = {} as typeof import("../../app/delivery/profile/page.js")
  handler satisfies AppPageConfig<"/delivery/profile">
}

// Validate ../../app/delivery/stats/page.tsx
{
  const handler = {} as typeof import("../../app/delivery/stats/page.js")
  handler satisfies AppPageConfig<"/delivery/stats">
}

// Validate ../../app/orders/[id]/confirmation/page.tsx
{
  const handler = {} as typeof import("../../app/orders/[id]/confirmation/page.js")
  handler satisfies AppPageConfig<"/orders/[id]/confirmation">
}

// Validate ../../app/orders/[id]/tracking/page.tsx
{
  const handler = {} as typeof import("../../app/orders/[id]/tracking/page.js")
  handler satisfies AppPageConfig<"/orders/[id]/tracking">
}

// Validate ../../app/orders/page.tsx
{
  const handler = {} as typeof import("../../app/orders/page.js")
  handler satisfies AppPageConfig<"/orders">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/restaurant/menu/page.tsx
{
  const handler = {} as typeof import("../../app/restaurant/menu/page.js")
  handler satisfies AppPageConfig<"/restaurant/menu">
}

// Validate ../../app/restaurant/orders/page.tsx
{
  const handler = {} as typeof import("../../app/restaurant/orders/page.js")
  handler satisfies AppPageConfig<"/restaurant/orders">
}

// Validate ../../app/restaurant/page.tsx
{
  const handler = {} as typeof import("../../app/restaurant/page.js")
  handler satisfies AppPageConfig<"/restaurant">
}

// Validate ../../app/restaurant/reports/page.tsx
{
  const handler = {} as typeof import("../../app/restaurant/reports/page.js")
  handler satisfies AppPageConfig<"/restaurant/reports">
}

// Validate ../../app/restaurants/[id]/page.tsx
{
  const handler = {} as typeof import("../../app/restaurants/[id]/page.js")
  handler satisfies AppPageConfig<"/restaurants/[id]">
}

// Validate ../../app/restaurants/page.tsx
{
  const handler = {} as typeof import("../../app/restaurants/page.js")
  handler satisfies AppPageConfig<"/restaurants">
}

// Validate ../../app/api/delivery/orders/[id]/assign/route.ts
{
  const handler = {} as typeof import("../../app/api/delivery/orders/[id]/assign/route.js")
  handler satisfies RouteHandlerConfig<"/api/delivery/orders/[id]/assign">
}

// Validate ../../app/api/delivery/orders/route.ts
{
  const handler = {} as typeof import("../../app/api/delivery/orders/route.js")
  handler satisfies RouteHandlerConfig<"/api/delivery/orders">
}

// Validate ../../app/api/orders/[id]/tracking/route.ts
{
  const handler = {} as typeof import("../../app/api/orders/[id]/tracking/route.js")
  handler satisfies RouteHandlerConfig<"/api/orders/[id]/tracking">
}

// Validate ../../app/api/orders/[id]/update-status/route.ts
{
  const handler = {} as typeof import("../../app/api/orders/[id]/update-status/route.js")
  handler satisfies RouteHandlerConfig<"/api/orders/[id]/update-status">
}

// Validate ../../app/api/orders/route.ts
{
  const handler = {} as typeof import("../../app/api/orders/route.js")
  handler satisfies RouteHandlerConfig<"/api/orders">
}





// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
